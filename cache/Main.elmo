Elm.Main = Elm.Main || {};
Elm.Main.make = function (_elm) {
   _elm.Main = _elm.Main || {};
   if (_elm.Main.values)
   return _elm.Main.values;
   var _N = Elm.Native,
   _U = _N.Utils.make(_elm),
   _L = _N.List.make(_elm),
   _E = _N.Error.make(_elm),
   _J = _N.JavaScript.make(_elm),
   $moduleName = "Main";
   var Basics = Elm.Basics.make(_elm);
   var Color = Elm.Color.make(_elm);
   var Graphics = Graphics || {};
   Graphics.Collage = Elm.Graphics.Collage.make(_elm);
   var Graphics = Graphics || {};
   Graphics.Element = Elm.Graphics.Element.make(_elm);
   var List = Elm.List.make(_elm);
   var Maybe = Elm.Maybe.make(_elm);
   var Native = Native || {};
   Native.Ports = Elm.Native.Ports.make(_elm);
   var Prelude = Elm.Prelude.make(_elm);
   var Set = Elm.Set.make(_elm);
   var Signal = Elm.Signal.make(_elm);
   var String = Elm.String.make(_elm);
   var Text = Elm.Text.make(_elm);
   var Time = Elm.Time.make(_elm);
   var _op = {};
   var showFloor = Basics.always(_U.chr(" "));
   var showPlayer = Basics.always(_U.chr("@"));
   var coordinates = _J.toList([{ctor: "_Tuple4"
                                ,_0: 0
                                ,_1: 0
                                ,_2: 0
                                ,_3: 0}
                               ,{ctor: "_Tuple4"
                                ,_0: 0
                                ,_1: 0
                                ,_2: 0
                                ,_3: 1}
                               ,{ctor: "_Tuple4"
                                ,_0: 0
                                ,_1: 0
                                ,_2: 1
                                ,_3: 0}
                               ,{ctor: "_Tuple4"
                                ,_0: 0
                                ,_1: 0
                                ,_2: 1
                                ,_3: 1}
                               ,{ctor: "_Tuple4"
                                ,_0: 0
                                ,_1: 1
                                ,_2: 0
                                ,_3: 0}
                               ,{ctor: "_Tuple4"
                                ,_0: 0
                                ,_1: 1
                                ,_2: 1
                                ,_3: 1}
                               ,{ctor: "_Tuple4"
                                ,_0: 0
                                ,_1: 1
                                ,_2: 1
                                ,_3: 0}
                               ,{ctor: "_Tuple4"
                                ,_0: 0
                                ,_1: 1
                                ,_2: 0
                                ,_3: 1}
                               ,{ctor: "_Tuple4"
                                ,_0: 1
                                ,_1: 0
                                ,_2: 0
                                ,_3: 0}
                               ,{ctor: "_Tuple4"
                                ,_0: 1
                                ,_1: 0
                                ,_2: 1
                                ,_3: 1}
                               ,{ctor: "_Tuple4"
                                ,_0: 1
                                ,_1: 0
                                ,_2: 1
                                ,_3: 0}
                               ,{ctor: "_Tuple4"
                                ,_0: 1
                                ,_1: 0
                                ,_2: 0
                                ,_3: 1}
                               ,{ctor: "_Tuple4"
                                ,_0: 1
                                ,_1: 1
                                ,_2: 0
                                ,_3: 0}
                               ,{ctor: "_Tuple4"
                                ,_0: 1
                                ,_1: 1
                                ,_2: 1
                                ,_3: 1}
                               ,{ctor: "_Tuple4"
                                ,_0: 1
                                ,_1: 1
                                ,_2: 1
                                ,_3: 0}
                               ,{ctor: "_Tuple4"
                                ,_0: 1
                                ,_1: 1
                                ,_2: 0
                                ,_3: 1}]);
   var lbind = Basics.flip(List.concatMap);
   var unlines = function (xs) {
      return function () {
         switch (xs.ctor)
         {case "::":
            return A2(String.append,
              A2(String.append,xs._0,"\n"),
              unlines(xs._1));
            case "[]": return "";}
         _E.Case($moduleName,
         "between lines 99 and 101");
      }();
   };
   var zipWith4 = F5(function (f,
   xs,
   ys,
   zs,
   ws) {
      return List.isEmpty(xs) || (List.isEmpty(ys) || (List.isEmpty(zs) || List.isEmpty(ws))) ? _J.toList([]) : {ctor: "::"
                                                                                                                ,_0: A4(f,
                                                                                                                List.head(xs),
                                                                                                                List.head(ys),
                                                                                                                List.head(zs),
                                                                                                                List.head(ws))
                                                                                                                ,_1: A5(zipWith4,
                                                                                                                f,
                                                                                                                List.tail(xs),
                                                                                                                List.tail(ys),
                                                                                                                List.tail(zs),
                                                                                                                List.tail(ws))};
   });
   var merge4 = zipWith4(F4(function (x,
   y,
   z,
   w) {
      return function () {
         var cs = A2(List.filter,
         F2(function (x,y) {
            return !_U.eq(x,y);
         })(_U.chr(" ")),
         _J.toList([x,y,z,w]));
         return function () {
            switch (cs.ctor)
            {case "::": return cs._0;
               case "[]": return _U.chr(" ");}
            _E.Case($moduleName,
            "between lines 89 and 91");
         }();
      }();
   }));
   var merge = List.zipWith(F2(function (x,
   y) {
      return _U.eq(x,
      _U.chr(" ")) ? y : x;
   }));
   var mergeAll = function (xs) {
      return function () {
         switch (xs.ctor)
         {case "::": return A2(merge,
              xs._0,
              mergeAll(xs._1));
            case "[]":
            return _J.toList([]);}
         _E.Case($moduleName,
         "between lines 76 and 79");
      }();
   };
   var setSwitch = F2(function (b,
   s) {
      return _U.replace([["$switch"
                         ,b]],
      s);
   });
   var PlayerMove = function (a) {
      return {ctor: "PlayerMove"
             ,_0: a};
   };
   var SwitchPrism = F2(function (a,
   b) {
      return {ctor: "SwitchPrism"
             ,_0: a
             ,_1: b};
   });
   var SwitchReceptor = F2(function (a,
   b) {
      return {ctor: "SwitchReceptor"
             ,_0: a
             ,_1: b};
   });
   var SwitchLaser = F3(function (a,
   b,
   c) {
      return {ctor: "SwitchLaser"
             ,_0: a
             ,_1: b
             ,_2: c};
   });
   var Game = F3(function (a,b,c) {
      return {_: {}
             ,board: b
             ,plr: a
             ,won: c};
   });
   var Board = F5(function (a,
   b,
   c,
   d,
   e) {
      return {_: {}
             ,lasers: c
             ,minmax: e
             ,prisms: a
             ,receptors: b
             ,tiles: d};
   });
   var Switchable = F2(function (a,
   b) {
      return _U.insert("$switch",
      a,
      b);
   });
   var Positioned = F2(function (a,
   b) {
      return _U.insert("pos",a,b);
   });
   var Off = {ctor: "Off"};
   var On = {ctor: "On"};
   var showPrism = function (_v9) {
      return function () {
         return function () {
            var _v11 = _v9.$switch;
            switch (_v11.ctor)
            {case "Off": return _U.chr("*");
               case "On": return _U.chr("%");}
            _E.Case($moduleName,
            "between lines 198 and 200");
         }();
      }();
   };
   var showReceptor = function (_v12) {
      return function () {
         return function () {
            var _v14 = _v12.$switch;
            switch (_v14.ctor)
            {case "Off": return _U.chr("_");
               case "On": return _U.chr("$");}
            _E.Case($moduleName,
            "between lines 203 and 205");
         }();
      }();
   };
   var W = {ctor: "W"};
   var Z = {ctor: "Z"};
   var Y = {ctor: "Y"};
   var X = {ctor: "X"};
   var axisOrder = F2(function (a,
   b) {
      return function () {
         var _v15 = {ctor: "_Tuple2"
                    ,_0: a
                    ,_1: b};
         switch (_v15.ctor)
         {case "_Tuple2":
            switch (_v15._0.ctor)
              {case "W": return Basics.GT;
                 case "X": return Basics.LT;
                 case "Y": return _U.eq(_v15._1,
                   X) ? Basics.GT : Basics.LT;
                 case "Z": return _U.eq(_v15._1,
                   W) ? Basics.LT : Basics.GT;}
              break;}
         _E.Case($moduleName,
         "between lines 37 and 41");
      }();
   });
   var mapCoordinate = F3(function (a,
   f,
   _v18) {
      return function () {
         switch (_v18.ctor)
         {case "_Tuple4":
            return function () {
                 switch (a.ctor)
                 {case "W":
                    return {ctor: "_Tuple4"
                           ,_0: _v18._0
                           ,_1: _v18._1
                           ,_2: _v18._2
                           ,_3: f(_v18._3)};
                    case "X":
                    return {ctor: "_Tuple4"
                           ,_0: f(_v18._0)
                           ,_1: _v18._1
                           ,_2: _v18._2
                           ,_3: _v18._3};
                    case "Y":
                    return {ctor: "_Tuple4"
                           ,_0: _v18._0
                           ,_1: f(_v18._1)
                           ,_2: _v18._2
                           ,_3: _v18._3};
                    case "Z":
                    return {ctor: "_Tuple4"
                           ,_0: _v18._0
                           ,_1: _v18._1
                           ,_2: f(_v18._2)
                           ,_3: _v18._3};}
                 _E.Case($moduleName,
                 "between lines 47 and 51");
              }();}
         _E.Case($moduleName,
         "between lines 47 and 51");
      }();
   });
   var setCoordinate = F2(function (a,
   i) {
      return A2(mapCoordinate,
      a,
      Basics.always(i));
   });
   var mapPosCoordinate = F3(function (a,
   f,
   p) {
      return function () {
         var pos$ = p.pos;
         return _U.replace([["pos"
                            ,A3(mapCoordinate,a,f,pos$)]],
         p);
      }();
   });
   var setPosCoordinate = F2(function (a,
   i) {
      return A2(mapPosCoordinate,
      a,
      Basics.always(i));
   });
   var getCoordinate = F2(function (a,
   _v25) {
      return function () {
         switch (_v25.ctor)
         {case "_Tuple4":
            return function () {
                 switch (a.ctor)
                 {case "W": return _v25._3;
                    case "X": return _v25._0;
                    case "Y": return _v25._1;
                    case "Z": return _v25._2;}
                 _E.Case($moduleName,
                 "between lines 54 and 58");
              }();}
         _E.Case($moduleName,
         "between lines 54 and 58");
      }();
   });
   var getPosCoordinate = F2(function (a,
   _v32) {
      return function () {
         return A2(getCoordinate,
         a,
         _v32.pos);
      }();
   });
   var iterAxis = F4(function (axis,
   is,
   f,
   ps) {
      return function () {
         switch (is.ctor)
         {case "::": return function () {
                 var _v37 = A2(List.filter,
                 function (p) {
                    return _U.eq(A2(getPosCoordinate,
                    axis,
                    p),
                    is._0);
                 },
                 ps);
                 switch (_v37.ctor)
                 {case "::": return {ctor: "::"
                                    ,_0: {ctor: "_Tuple3"
                                         ,_0: axis
                                         ,_1: is._0
                                         ,_2: Maybe.Just(f(_v37._0))}
                                    ,_1: A4(iterAxis,
                                    axis,
                                    is._1,
                                    f,
                                    ps)};
                    case "[]": return {ctor: "::"
                                      ,_0: {ctor: "_Tuple3"
                                           ,_0: axis
                                           ,_1: is._0
                                           ,_2: Maybe.Nothing}
                                      ,_1: A4(iterAxis,
                                      axis,
                                      is._1,
                                      f,
                                      ps)};}
                 _E.Case($moduleName,
                 "between lines 116 and 119");
              }();
            case "[]":
            return _J.toList([]);}
         _E.Case($moduleName,
         "between lines 114 and 119");
      }();
   });
   var iterAxes = F4(function (_v40,
   is,
   f,
   ps) {
      return function () {
         switch (_v40.ctor)
         {case "_Tuple2":
            return function () {
                 switch (is.ctor)
                 {case "::": switch (is._0.ctor)
                      {case "_Tuple2":
                         return function () {
                              var _v49 = A2(List.filter,
                              function (p) {
                                 return _U.eq(A2(getPosCoordinate,
                                 _v40._0,
                                 p),
                                 is._0._0) && _U.eq(A2(getPosCoordinate,
                                 _v40._1,
                                 p),
                                 is._0._1);
                              },
                              ps);
                              switch (_v49.ctor)
                              {case "::": return {ctor: "::"
                                                 ,_0: {ctor: "_Tuple3"
                                                      ,_0: {ctor: "_Tuple2"
                                                           ,_0: _v40._0
                                                           ,_1: _v40._1}
                                                      ,_1: {ctor: "_Tuple2"
                                                           ,_0: is._0._0
                                                           ,_1: is._0._1}
                                                      ,_2: Maybe.Just(f(_v49._0))}
                                                 ,_1: A4(iterAxes,
                                                 {ctor: "_Tuple2"
                                                 ,_0: _v40._0
                                                 ,_1: _v40._1},
                                                 is._1,
                                                 f,
                                                 ps)};
                                 case "[]": return {ctor: "::"
                                                   ,_0: {ctor: "_Tuple3"
                                                        ,_0: {ctor: "_Tuple2"
                                                             ,_0: _v40._0
                                                             ,_1: _v40._1}
                                                        ,_1: {ctor: "_Tuple2"
                                                             ,_0: is._0._0
                                                             ,_1: is._0._1}
                                                        ,_2: Maybe.Nothing}
                                                   ,_1: A4(iterAxes,
                                                   {ctor: "_Tuple2"
                                                   ,_0: _v40._0
                                                   ,_1: _v40._1},
                                                   is._1,
                                                   f,
                                                   ps)};}
                              _E.Case($moduleName,
                              "between lines 123 and 126");
                           }();}
                      break;
                    case "[]":
                    return _J.toList([]);}
                 _E.Case($moduleName,
                 "between lines 121 and 126");
              }();}
         _E.Case($moduleName,
         "between lines 121 and 126");
      }();
   });
   var inSlice = F3(function (v,
   _v52,
   p) {
      return function () {
         switch (_v52.ctor)
         {case "_Tuple2":
            return _U.eq(A2(getCoordinate,
              _v52._0,
              v),
              A2(getPosCoordinate,
              _v52._0,
              p)) && _U.eq(A2(getCoordinate,
              _v52._1,
              v),
              A2(getPosCoordinate,
              _v52._1,
              p));}
         _E.Case($moduleName,
         "between lines 95 and 96");
      }();
   });
   var notAxes = function (_v56) {
      return function () {
         switch (_v56.ctor)
         {case "_Tuple2":
            return A2(List.filter,
              function (x) {
                 return !_U.eq(x,
                 _v56._0) && !_U.eq(x,_v56._1);
              },
              _J.toList([X,Y,Z,W]));}
         _E.Case($moduleName,
         "on line 104, column 18 to 59");
      }();
   };
   var testBoard = function () {
      var mm = {ctor: "_Tuple2"
               ,_0: 0
               ,_1: 1};
      var ts = _J.toList([]);
      var ls = _J.toList([{_: {}
                          ,$switch: Off
                          ,dir: X
                          ,pos: {ctor: "_Tuple4"
                                ,_0: 0
                                ,_1: 1
                                ,_2: 0
                                ,_3: 0}}]);
      var rs = _J.toList([{_: {}
                          ,$switch: Off
                          ,pos: {ctor: "_Tuple4"
                                ,_0: 1
                                ,_1: 1
                                ,_2: 0
                                ,_3: 0}}]);
      var ps = _J.toList([]);
      return A5(Board,ps,rs,ls,ts,mm);
   }();
   var planes = _J.toList([{ctor: "_Tuple2"
                           ,_0: X
                           ,_1: Y}
                          ,{ctor: "_Tuple2",_0: X,_1: Z}
                          ,{ctor: "_Tuple2",_0: X,_1: W}
                          ,{ctor: "_Tuple2",_0: Y,_1: Z}
                          ,{ctor: "_Tuple2",_0: Y,_1: W}
                          ,{ctor: "_Tuple2"
                           ,_0: Z
                           ,_1: W}]);
   var showLaser = function (_v60) {
      return function () {
         return function () {
            var _v62 = _v60.$switch;
            switch (_v62.ctor)
            {case "Off": return _U.chr("?");
               case "On": return function () {
                    var _v63 = _v60.dir;
                    switch (_v63.ctor)
                    {case "W": return _U.chr(";");
                       case "X": return _U.chr(":");
                       case "Y": return _U.chr("=");
                       case "Z": return _U.chr(".");}
                    _E.Case($moduleName,
                    "between lines 210 and 215");
                 }();}
            _E.Case($moduleName,
            "between lines 209 and 215");
         }();
      }();
   };
   var showAxis = function (a) {
      return function () {
         switch (a.ctor)
         {case "W": return _U.chr("W");
            case "X": return _U.chr("X");
            case "Y": return _U.chr("Y");
            case "Z": return _U.chr("Z");}
         _E.Case($moduleName,
         "between lines 221 and 225");
      }();
   };
   var showSlice = F3(function (v,
   _v65,
   b) {
      return function () {
         switch (_v65.ctor)
         {case "_Tuple2":
            return function () {
                 var axes = _J.toList([String.fromList(A2(List.map,
                 showAxis,
                 _J.toList([_v65._0
                           ,_v65._1])))]);
                 var getLine = F2(function (axis,
                 x) {
                    return List.filter(function (e) {
                       return _U.eq(A2(getPosCoordinate,
                       axis,
                       e),
                       x);
                    });
                 });
                 var $ = b.minmax,
                 mini = $._0,
                 maxi = $._1;
                 var getLines = F2(function (axis,
                 es) {
                    return A2(List.map,
                    function (i) {
                       return A3(getLine,axis,i,es);
                    },
                    _L.range(mini,maxi));
                 });
                 var $ = List.sortWith(axisOrder)(notAxes({ctor: "_Tuple2"
                                                          ,_0: _v65._0
                                                          ,_1: _v65._1}));
                 var a1$ = function () {
                    switch ($.ctor)
                    {case "::": switch ($._1.ctor)
                         {case "::":
                            switch ($._1._1.ctor)
                              {case "[]": return $._0;}
                              break;}
                         break;}
                    _E.Case($moduleName,
                    "on line 130, column 26 to 63");
                 }();
                 var a2$ = function () {
                    switch ($.ctor)
                    {case "::": switch ($._1.ctor)
                         {case "::":
                            switch ($._1._1.ctor)
                              {case "[]": return $._1._0;}
                              break;}
                         break;}
                    _E.Case($moduleName,
                    "on line 130, column 26 to 63");
                 }();
                 var fbP = function ($) {
                    return List.sortBy(function (_) {
                       return _.pos;
                    })(List.filter(A2(inSlice,
                    v,
                    {ctor: "_Tuple2"
                    ,_0: a1$
                    ,_1: a2$}))($));
                 };
                 var $ = {ctor: "_Tuple4"
                         ,_0: fbP(b.prisms)
                         ,_1: fbP(b.receptors)
                         ,_2: fbP(b.lasers)
                         ,_3: fbP(b.tiles)},
                 ps = $._0,
                 rs = $._1,
                 ls = $._2,
                 ts = $._3;
                 var formatSection = function (f) {
                    return function ($) {
                       return function ($) {
                          return List.map(List.map($));
                       }(f)(getLines(a2$)($));
                    };
                 };
                 var allSections = A5(zipWith4,
                 merge4,
                 A2(formatSection,showPrism,ps),
                 A2(formatSection,
                 showReceptor,
                 rs),
                 A2(formatSection,showLaser,ls),
                 A2(formatSection,showFloor,ts));
                 return _J.toList([A4(iterAxes,
                 {ctor: "_Tuple2"
                 ,_0: _v65._0
                 ,_1: _v65._1},
                 A2(lbind,
                 _L.range(mini,maxi),
                 function (x) {
                    return A2(lbind,
                    _L.range(mini,maxi),
                    function (y) {
                       return _J.toList([{ctor: "_Tuple2"
                                         ,_0: x
                                         ,_1: y}]);
                    });
                 }),
                 showLaser,
                 ls)]);
              }();}
         _E.Case($moduleName,
         "between lines 130 and 147");
      }();
   });
   var main = Graphics.Element.flow(Graphics.Element.down)(List.map(Text.asText)(A2(lbind,
   coordinates,
   function (x) {
      return A2(lbind,
      planes,
      function (p) {
         return A3(showSlice,
         x,
         p,
         testBoard);
      });
   })));
   _elm.Main.values = {_op: _op
                      ,axisOrder: axisOrder
                      ,setSwitch: setSwitch
                      ,mapCoordinate: mapCoordinate
                      ,getCoordinate: getCoordinate
                      ,setCoordinate: setCoordinate
                      ,mapPosCoordinate: mapPosCoordinate
                      ,setPosCoordinate: setPosCoordinate
                      ,getPosCoordinate: getPosCoordinate
                      ,merge: merge
                      ,mergeAll: mergeAll
                      ,zipWith4: zipWith4
                      ,merge4: merge4
                      ,inSlice: inSlice
                      ,unlines: unlines
                      ,notAxes: notAxes
                      ,iterAxis: iterAxis
                      ,iterAxes: iterAxes
                      ,showSlice: showSlice
                      ,lbind: lbind
                      ,main: main
                      ,testBoard: testBoard
                      ,coordinates: coordinates
                      ,planes: planes
                      ,showPrism: showPrism
                      ,showReceptor: showReceptor
                      ,showLaser: showLaser
                      ,showPlayer: showPlayer
                      ,showAxis: showAxis
                      ,showFloor: showFloor
                      ,X: X
                      ,Y: Y
                      ,Z: Z
                      ,W: W
                      ,On: On
                      ,Off: Off
                      ,SwitchLaser: SwitchLaser
                      ,SwitchReceptor: SwitchReceptor
                      ,SwitchPrism: SwitchPrism
                      ,PlayerMove: PlayerMove
                      ,Positioned: Positioned
                      ,Switchable: Switchable
                      ,Board: Board
                      ,Game: Game};
   return _elm.Main.values;
};